{"version":3,"file":"codemirror-compose-change.es5.js","sources":["../src/Util.ts","../src/CoordinateChanges.ts","../src/ComposeChanges.ts"],"sourcesContent":["\nimport {FromTo} from \"./Types\";\n\n// Return negative / 0 / positive.  a < b iff posCmp(a, b) < 0 etc.\nexport function posCmp(a: CodeMirror.Position, b: CodeMirror.Position) {\n  return (a.line - b.line) || (a.ch - b.ch);\n}\n\n// True if inside, false if on edge.\nexport function posInsideRange(pos: CodeMirror.Position, range: FromTo) {\n  return posCmp(range.from, pos) < 0 && posCmp(pos, range.to) < 0;\n}\n\nexport function posInsideRangeInclusive(pos: CodeMirror.Position, range: FromTo) {\n  return posCmp(range.from, pos) <= 0 && posCmp(pos, range.to) <= 0;\n}\n\nexport function rangesEqual(range1: FromTo, range2: FromTo) {\n  return (posCmp(range1.from, range2.from) === 0) && (posCmp(range1.to, range2.to) === 0);\n}\n\nexport function last<T>(array: T[]): T | undefined {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n","\nimport {FromTo} from \"./Types\";\nimport {last, posCmp} from \"./Util\";\n\nexport function convertPointToBeforeChange(point: CodeMirror.Position, change: CodeMirror.EditorChange): CodeMirror.Position | null {\n  let linesInserted = change.text.length - change.removed.length;\n  let line = point.line - linesInserted;\n\n  let postEditChangeRange = preEditToPostEditChangeRange(change);\n\n  if (point.line > postEditChangeRange.to.line) {\n    return {line, ch: point.ch};\n  } else if (point.line === postEditChangeRange.to.line) {\n    // Since we're undoing this change, we think of it as first removing change.text,\n    // then inserting change.removed. Hence,\n    let removed = change.text;\n    let inserted = change.removed;\n\n    return {\n      line,\n      ch: point.ch + adjustCh(change, removed, inserted)\n    };\n  } else if (posCmp(point, change.from) < 0) {\n    // Tried to convert point to before change but it was before change.from\n    return point;\n  } else {\n    // Tried to transform point that was inside of change\n    return null;\n  }\n}\n\nexport function convertPointToAfterChange(point: CodeMirror.Position, change: CodeMirror.EditorChange): CodeMirror.Position | null {\n  let linesInserted = change.text.length - change.removed.length;\n  let line = point.line + linesInserted;\n\n  if (point.line > change.to.line) {\n    return {line, ch: point.ch};\n  } else if (point.line === change.to.line) {\n    return {\n      line,\n      ch: point.ch + adjustCh(change, change.removed, change.text)\n    };\n  } else if (posCmp(point, change.from) < 0) {\n    // Tried to convert point to after change but it was before change.from\n    return point;\n  } else {\n    // Point was inside of change\n    return null;\n  }\n}\n\nfunction adjustCh(change: CodeMirror.EditorChange, removed: string[], inserted: string[]): number {\n  let ch = 0;\n\n  if (removed.length === 1 && inserted.length > 1) {\n    // Single remove multiple insert\n    ch -= last(removed).length;\n    ch += last(inserted).length;\n    ch -= change.from.ch;\n  } else if (removed.length === 1 && inserted.length === 1) {\n    // Single remove single insert\n    ch -= last(removed).length;\n    ch += last(inserted).length;\n  } else if (removed.length > 1 && inserted.length === 1) {\n    // Multiple remove single insert\n    // If multiple lines were removed, and only one was added, then ch gets bumped forward by change.from.ch\n    ch -= last(removed).length;\n    ch += last(inserted).length;\n    ch += change.from.ch;\n  } else if (removed.length > 1 && inserted.length > 1) {\n    // Multiple remove multiple insert\n    ch -= last(removed).length;\n    ch += last(inserted).length;\n  }\n\n  return ch;\n}\n\nexport function preEditToPostEditChangeRange(change: CodeMirror.EditorChange): FromTo {\n  let line = change.from.line + change.text.length - 1;\n\n  let ch: number;\n  if (change.text.length === 1) {\n    ch = change.from.ch + last(change.text).length;\n  } else {\n    ch = last(change.text).length;\n  }\n\n  let to = {line, ch};\n\n  return {\n    from: change.from,\n    to\n  };\n}\n\nexport function applyChange(cm: CodeMirror.Doc, change: CodeMirror.EditorChange) {\n  cm.replaceRange(change.text.join(\"\\n\"), change.from, change.to);\n}\n\nexport function reverseApplyChange(cm: CodeMirror.Doc, change: CodeMirror.EditorChange) {\n  let postEditChangeRange = preEditToPostEditChangeRange(change);\n\n  // Want (0, 2) to (1, 1)\n  console.log(\"postEditChangeRange in reverseApplyChange\", postEditChangeRange);\n\n  cm.replaceRange(change.removed.join(\"\\n\"), postEditChangeRange.from, postEditChangeRange.to);\n}\n","\n\nimport {convertPointToAfterChange, convertPointToBeforeChange, preEditToPostEditChangeRange} from \"./CoordinateChanges\";\nimport {FromTo} from \"./Types\";\nimport {last, posCmp, posInsideRangeInclusive, rangesEqual} from \"./Util\";\n\n/**\n * Given two changes, compose them to make another change that would have the exact same effect, if applied.\n * This is used to combine the changes produced by several OT operations into a single, more sensible change\n */\nexport function composeChanges(cm: CodeMirror.Doc, oldChange: CodeMirror.EditorChange, change: CodeMirror.EditorChange): CodeMirror.EditorChange {\n  // There are 3 coordinates systems, orig, middle, and final\n\n  // This is the range affected by the first change, in the \"middle\" coordinate system\n  let affectedMiddle: FromTo = preEditToPostEditChangeRange(oldChange);\n\n  // Does the new change's range (in the middle coordinate system) intersect with affectedMiddle?\n  if (rangesOverlap(affectedMiddle, change)) {\n    // There are 5 possible types of overlap\n\n    if (rangesEqual(affectedMiddle, change)) {\n      // The new change perfectly overwrites whatever the old change put there\n      return {\n        ...oldChange,\n        text: change.text\n      };\n    } else if (rangeContains(affectedMiddle, change)) {\n      // The second change is entirely within the text inserted by the first change\n\n      // The first part begins at oldChange.from and proceeds to some line and ch in oldChange.text\n      let [firstPart, unused] = splitTextByPositionDifference(oldChange.text, change.from, oldChange.from);\n\n      // The second part begins where change.text ends and proceeds through the remainder of oldChange.text\n      let [unused2, secondPart] = splitTextByPositionDifference(oldChange.text, change.to, oldChange.from);\n\n      let text = joinWithoutNewlines(joinWithoutNewlines(firstPart, change.text), secondPart);\n\n      return {\n        from: oldChange.from,\n        to: oldChange.to,\n        removed: oldChange.removed,\n        text,\n        origin: oldChange.origin\n      };\n    } else if (rangeContains(change, affectedMiddle)) {\n      // The second change overwrites all the text inserted by the first change\n\n      let to: CodeMirror.Position;\n      let removed: string[];\n      let text: string[];\n\n      let changeToInOrigCoords = convertPointToBeforeChange(change.to, oldChange);\n\n      if (posCmp(changeToInOrigCoords, oldChange.to) <= 0) {\n        // The oldChange removal went further into the document\n\n        to = oldChange.to;\n\n        let [initialRemoved, unused6] = splitTextByPositionDifference(change.removed, oldChange.from, change.from);\n        removed = joinWithoutNewlines(initialRemoved, oldChange.removed);\n\n        text = change.text;\n      } else {\n        // The change removal went further into the document\n\n        to = changeToInOrigCoords;\n\n        let [initialRemoved, unused6] = splitTextByPositionDifference(change.removed, oldChange.from, change.from);\n        let oldChangeToInMiddleCoords = convertPointToAfterChange(oldChange.to, oldChange);\n        let [unused9, finalRemoved] = splitTextByPositionDifference(change.removed, oldChangeToInMiddleCoords, change.from);\n        removed = joinWithoutNewlines(joinWithoutNewlines(initialRemoved, oldChange.removed), finalRemoved);\n\n        text = change.text;\n      }\n\n      return {\n        from: change.from,\n        to,\n        text,\n        removed,\n        origin: oldChange.origin\n      };\n    } else if (posCmp(change.from, affectedMiddle.from) < 0) {\n      // The second change overlaps on the left\n\n      let [changeRemoved, unused4] = splitTextByPositionDifference(change.removed, oldChange.from, change.from);\n      let removed = joinWithoutNewlines(changeRemoved, oldChange.removed);\n\n      let [unused5, remainingChange1Text] = splitTextByPositionDifference(oldChange.text, change.to, oldChange.from);\n      let text = joinWithoutNewlines(change.text, remainingChange1Text);\n\n      return {\n        from: change.from,\n        to: oldChange.to,\n        removed,\n        text,\n        origin: oldChange.origin\n      };\n    } else {\n      // The second change overlaps on the right\n\n      let to: CodeMirror.Position;\n      let removed: string[];\n\n      let changeToInOrigCoords = convertPointToBeforeChange(change.to, oldChange);\n\n      if (posCmp(changeToInOrigCoords, oldChange.to) <= 0) {\n        // The oldChange removal went further into the document\n        to = oldChange.to;\n        removed = oldChange.removed;\n      } else {\n        // The second change's removal goes further into the document;\n        to = changeToInOrigCoords;\n\n        let oldChangeToInMiddleCoords = convertPointToAfterChange(oldChange.to, oldChange);\n        let [unused3, extraRemoved] = splitTextByPositionDifference(change.removed, oldChangeToInMiddleCoords, change.from);\n        removed = joinWithoutNewlines(oldChange.removed, extraRemoved);\n      }\n\n      let [text, unused] = splitTextByPositionDifference(oldChange.text, change.from, oldChange.from);\n      text = joinWithoutNewlines(text, change.text);\n\n      return {\n        from: oldChange.from,\n        to,\n        text,\n        removed,\n        origin: oldChange.origin\n      };\n    }\n  } else {\n    // The new change's range is completely before or completely after the old change's range\n    if (rangeIsAfterInclusive(affectedMiddle, change)) {\n      // The new change precedes the old change\n\n      let middleStartPos = preEditToPostEditChangeRange(change).to;\n      let middleEndPos = convertPointToAfterChange(oldChange.from, change);\n      let middle = cm.getRange(middleStartPos, middleEndPos, \"\\n\");\n\n      return {\n        from: change.from,\n        to: oldChange.to,\n        removed: (change.removed.join(\"\\n\") + middle + oldChange.removed.join(\"\\n\")).split(\"\\n\"),\n        text: (change.text.join(\"\\n\") + middle + oldChange.text.join(\"\\n\")).split(\"\\n\"),\n        origin: oldChange.origin\n      };\n    } else {\n      // The old change precedes the new change\n      if (!rangeIsAfterInclusive(change, affectedMiddle)) console.error(\"RANGE WAS NOT AFTER\");\n\n      // Convert change.to to the \"orig\" coordinate system. This will be the \"to\" of the composed change\n      let finalTo = convertPointToBeforeChange(change.to, oldChange);\n      // Find the middle piece\n      let middleStartPos = affectedMiddle.to;\n      let middleEndPos = change.from;\n      let middle = cm.getRange(middleStartPos, middleEndPos, \"\\n\");\n\n      return {\n        from: oldChange.from,\n        to: finalTo,\n        text: (oldChange.text.join(\"\\n\") + middle + change.text.join(\"\\n\")).split(\"\\n\"),\n        removed: (oldChange.removed.join(\"\\n\") + middle + change.removed.join(\"\\n\")).split(\"\\n\"),\n        origin: oldChange.origin\n      };\n    }\n  }\n}\n\nfunction rangesOverlap(range1: FromTo, range2: FromTo): boolean {\n  if (rangeIsAfterInclusive(range2, range1)) return false;\n  if (rangeIsAfterInclusive(range1, range2)) return false;\n  return true;\n}\n\nfunction rangeIsAfterInclusive(range1: FromTo, range2: FromTo): boolean {\n  return posCmp(range2.to, range1.from) <= 0; // TODO: check this\n}\n\n// Return true if range2 is completely contained within range1\nfunction rangeContains(range1: FromTo, range2: FromTo): boolean {\n  return posInsideRangeInclusive(range2.from, range1) && posInsideRangeInclusive(range2.to, range1);\n}\n\nfunction joinWithoutNewlines(list1: string[], list2: string[]): string[] {\n  let ret = list1.slice(0, list1.length - 1);\n\n  ret.push(last(list1) + list2[0]);\n\n  ret.push(...list2.slice(1));\n\n  return ret;\n}\n\nfunction splitTextAt(text: string[], line: number, ch: number): [string[], string[]] {\n  let firstPart = [...text.slice(0, line),\n                   text[line].slice(0, ch)];\n\n  let secondPart = [text[line].slice(ch),\n                    ...text.slice(line + 1)];\n\n  return [firstPart, secondPart];\n}\n\nfunction splitTextByPositionDifference(text: string[], furtherPos: CodeMirror.Position, earlierPos: CodeMirror.Position): [string[], string[]] {\n  return splitTextAt(text,\n                     furtherPos.line - earlierPos.line,\n                     furtherPos.line === earlierPos.line ? furtherPos.ch - earlierPos.ch : furtherPos.ch);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA,SAAgB,MAAM,CAAC,CAAsB,EAAE,CAAsB;IACnE,OAAO,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;CAC3C;AAED,SAKgB,uBAAuB,CAAC,GAAwB,EAAE,KAAa;IAC7E,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;CACnE;AAED,SAAgB,WAAW,CAAC,MAAc,EAAE,MAAc;IACxD,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;CACzF;AAED,SAAgB,IAAI,CAAI,KAAU;IAChC,IAAI,MAAM,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;IAC9C,OAAO,MAAM,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;CAC/C;;SCpBe,0BAA0B,CAAC,KAA0B,EAAE,MAA+B;IACpG,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/D,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC;IAEtC,IAAI,mBAAmB,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;IAE/D,IAAI,KAAK,CAAC,IAAI,GAAG,mBAAmB,CAAC,EAAE,CAAC,IAAI,EAAE;QAC5C,OAAO,EAAC,IAAI,MAAA,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAC,CAAC;KAC7B;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,mBAAmB,CAAC,EAAE,CAAC,IAAI,EAAE;;;QAGrD,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;QAC1B,IAAI,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC;QAE9B,OAAO;YACL,IAAI,MAAA;YACJ,EAAE,EAAE,KAAK,CAAC,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC;SACnD,CAAC;KACH;SAAM,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;QAEzC,OAAO,KAAK,CAAC;KACd;SAAM;;QAEL,OAAO,IAAI,CAAC;KACb;CACF;AAED,SAAgB,yBAAyB,CAAC,KAA0B,EAAE,MAA+B;IACnG,IAAI,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;IAC/D,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,GAAG,aAAa,CAAC;IAEtC,IAAI,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE;QAC/B,OAAO,EAAC,IAAI,MAAA,EAAE,EAAE,EAAE,KAAK,CAAC,EAAE,EAAC,CAAC;KAC7B;SAAM,IAAI,KAAK,CAAC,IAAI,KAAK,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE;QACxC,OAAO;YACL,IAAI,MAAA;YACJ,EAAE,EAAE,KAAK,CAAC,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC;SAC7D,CAAC;KACH;SAAM,IAAI,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;QAEzC,OAAO,KAAK,CAAC;KACd;SAAM;;QAEL,OAAO,IAAI,CAAC;KACb;CACF;AAED,SAAS,QAAQ,CAAC,MAA+B,EAAE,OAAiB,EAAE,QAAkB;IACtF,IAAI,EAAE,GAAG,CAAC,CAAC;IAEX,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;;QAE/C,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC3B,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAC5B,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;KACtB;SAAM,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;;QAExD,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC3B,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;KAC7B;SAAM,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;;;QAGtD,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC3B,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAC5B,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;KACtB;SAAM,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;;QAEpD,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;QAC3B,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;KAC7B;IAED,OAAO,EAAE,CAAC;CACX;AAED,SAAgB,4BAA4B,CAAC,MAA+B;IAC1E,IAAI,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IAErD,IAAI,EAAU,CAAC;IACf,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QAC5B,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;KAChD;SAAM;QACL,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC;KAC/B;IAED,IAAI,EAAE,GAAG,EAAC,IAAI,MAAA,EAAE,EAAE,IAAA,EAAC,CAAC;IAEpB,OAAO;QACL,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,EAAE,IAAA;KACH,CAAC;CACH;AAED,SAAgB,WAAW,CAAC,EAAkB,EAAE,MAA+B;IAC7E,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,EAAE,CAAC,CAAC;CACjE;AAED,SAAgB,kBAAkB,CAAC,EAAkB,EAAE,MAA+B;IACpF,IAAI,mBAAmB,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;;IAG/D,OAAO,CAAC,GAAG,CAAC,2CAA2C,EAAE,mBAAmB,CAAC,CAAC;IAE9E,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,mBAAmB,CAAC,IAAI,EAAE,mBAAmB,CAAC,EAAE,CAAC,CAAC;CAC9F;;ACrGD;;;;AAIA,SAAgB,cAAc,CAAC,EAAkB,EAAE,SAAkC,EAAE,MAA+B;;;IAIpH,IAAI,cAAc,GAAW,4BAA4B,CAAC,SAAS,CAAC,CAAC;;IAGrE,IAAI,aAAa,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE;;QAGzC,IAAI,WAAW,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE;;YAEvC,oBACK,SAAS,IACZ,IAAI,EAAE,MAAM,CAAC,IAAI,IACjB;SACH;aAAM,IAAI,aAAa,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE;;;YAI5C,IAAA,+EAAgG,EAA/F,iBAAS,EAAE,cAAoF,CAAC;;YAGjG,IAAA,6EAAgG,EAA/F,eAAO,EAAE,kBAAsF,CAAC;YAErG,IAAI,IAAI,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC;YAExF,OAAO;gBACL,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,OAAO,EAAE,SAAS,CAAC,OAAO;gBAC1B,IAAI,MAAA;gBACJ,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC;SACH;aAAM,IAAI,aAAa,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE;;YAGhD,IAAI,EAAE,SAAqB,CAAC;YAC5B,IAAI,OAAO,SAAU,CAAC;YACtB,IAAI,IAAI,SAAU,CAAC;YAEnB,IAAI,oBAAoB,GAAG,0BAA0B,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAE5E,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;;gBAGnD,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;gBAEd,IAAA,+EAAsG,EAArG,sBAAc,EAAE,eAAqF,CAAC;gBAC3G,OAAO,GAAG,mBAAmB,CAAC,cAAc,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBAEjE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;aACpB;iBAAM;;gBAGL,EAAE,GAAG,oBAAoB,CAAC;gBAEtB,IAAA,+EAAsG,EAArG,sBAAc,EAAE,eAAqF,CAAC;gBAC3G,IAAI,yBAAyB,GAAG,yBAAyB,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;gBAC/E,IAAA,0FAA+G,EAA9G,eAAO,EAAE,oBAAqG,CAAC;gBACpH,OAAO,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,cAAc,EAAE,SAAS,CAAC,OAAO,CAAC,EAAE,YAAY,CAAC,CAAC;gBAEpG,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;aACpB;YAED,OAAO;gBACL,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,EAAE,IAAA;gBACF,IAAI,MAAA;gBACJ,OAAO,SAAA;gBACP,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC;SACH;aAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;;YAGnD,IAAA,+EAAqG,EAApG,qBAAa,EAAE,eAAqF,CAAC;YAC1G,IAAI,OAAO,GAAG,mBAAmB,CAAC,aAAa,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;YAEhE,IAAA,6EAA0G,EAAzG,eAAO,EAAE,4BAAgG,CAAC;YAC/G,IAAI,IAAI,GAAG,mBAAmB,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAElE,OAAO;gBACL,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,OAAO,SAAA;gBACP,IAAI,MAAA;gBACJ,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC;SACH;aAAM;;YAGL,IAAI,EAAE,SAAqB,CAAC;YAC5B,IAAI,OAAO,SAAU,CAAC;YAEtB,IAAI,oBAAoB,GAAG,0BAA0B,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;YAE5E,IAAI,MAAM,CAAC,oBAAoB,EAAE,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;;gBAEnD,EAAE,GAAG,SAAS,CAAC,EAAE,CAAC;gBAClB,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;aAC7B;iBAAM;;gBAEL,EAAE,GAAG,oBAAoB,CAAC;gBAE1B,IAAI,yBAAyB,GAAG,yBAAyB,CAAC,SAAS,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;gBAC/E,IAAA,0FAA+G,EAA9G,eAAO,EAAE,oBAAqG,CAAC;gBACpH,OAAO,GAAG,mBAAmB,CAAC,SAAS,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;aAChE;YAEG,IAAA,+EAA2F,EAA1F,YAAI,EAAE,cAAoF,CAAC;YAChG,IAAI,GAAG,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;YAE9C,OAAO;gBACL,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,EAAE,IAAA;gBACF,IAAI,MAAA;gBACJ,OAAO,SAAA;gBACP,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC;SACH;KACF;SAAM;;QAEL,IAAI,qBAAqB,CAAC,cAAc,EAAE,MAAM,CAAC,EAAE;;YAGjD,IAAI,cAAc,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;YAC7D,IAAI,YAAY,GAAG,yBAAyB,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;YACrE,IAAI,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,cAAc,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAE7D,OAAO;gBACL,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,EAAE,EAAE,SAAS,CAAC,EAAE;gBAChB,OAAO,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;gBACxF,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;gBAC/E,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC;SACH;aAAM;;YAEL,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,cAAc,CAAC;gBAAE,OAAO,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;;YAGzF,IAAI,OAAO,GAAG,0BAA0B,CAAC,MAAM,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;;YAE/D,IAAI,cAAc,GAAG,cAAc,CAAC,EAAE,CAAC;YACvC,IAAI,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC;YAC/B,IAAI,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,cAAc,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;YAE7D,OAAO;gBACL,IAAI,EAAE,SAAS,CAAC,IAAI;gBACpB,EAAE,EAAE,OAAO;gBACX,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;gBAC/E,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC;gBACxF,MAAM,EAAE,SAAS,CAAC,MAAM;aACzB,CAAC;SACH;KACF;CACF;AAED,SAAS,aAAa,CAAC,MAAc,EAAE,MAAc;IACnD,IAAI,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC;QAAE,OAAO,KAAK,CAAC;IACxD,IAAI,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC;QAAE,OAAO,KAAK,CAAC;IACxD,OAAO,IAAI,CAAC;CACb;AAED,SAAS,qBAAqB,CAAC,MAAc,EAAE,MAAc;IAC3D,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;CAC5C;;AAGD,SAAS,aAAa,CAAC,MAAc,EAAE,MAAc;IACnD,OAAO,uBAAuB,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,uBAAuB,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;CACnG;AAED,SAAS,mBAAmB,CAAC,KAAe,EAAE,KAAe;IAC3D,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAE3C,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAEjC,GAAG,CAAC,IAAI,OAAR,GAAG,EAAS,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;IAE5B,OAAO,GAAG,CAAC;CACZ;AAED,SAAS,WAAW,CAAC,IAAc,EAAE,IAAY,EAAE,EAAU;IAC3D,IAAI,SAAS,GAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,SACtB,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAC,CAAC;IAE1C,IAAI,UAAU,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,SACjB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;IAE3C,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;CAChC;AAED,SAAS,6BAA6B,CAAC,IAAc,EAAE,UAA+B,EAAE,UAA+B;IACrH,OAAO,WAAW,CAAC,IAAI,EACJ,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,EACjC,UAAU,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;CACzG;;;;"}